name: SB CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 1) Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      #      - name: 2) Convert to prod config
      #        run: |
      #          cd ./src/main/resources
      #          [ -e "application.yml" ] && rm application.yml
      #          echo "spring:" > application.yml
      #          echo "  profiles:" >> application.yml
      #          echo "    active: prod" >> application.yml
      #
      #      - name: 3) Set prod.yml
      #        uses: microsoft/variable-substitution@v1
      #        with:
      #          files: ./src/main/resources/application-prod.yml
      #        env:
      #          spring.datasource.url: ${{ secrets.DB_URL }}
      #          spring.datasource.username: ${{ secrets.DB_USER }}
      #          spring.datasource.password: ${{ secrets.DB_PW }}

      - name: 4) Grant permission
        run: chmod +x ./gradlew

      - name: 5) Build with Gradle
        run: ./gradlew bootJar

      - name: 6) Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest

      - name: 7) Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            sudo docker image prune -a -f
          debug: true
